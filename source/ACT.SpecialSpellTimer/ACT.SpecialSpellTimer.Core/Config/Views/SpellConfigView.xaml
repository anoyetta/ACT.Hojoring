<UserControl
  x:Class="ACT.SpecialSpellTimer.Config.Views.SpellConfigView"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:wpf="clr-namespace:FFXIV.Framework.WPF;assembly=FFXIV.Framework"
  xmlns:fwcmn="clr-namespace:FFXIV.Framework.Common;assembly=FFXIV.Framework"
  xmlns:fwcnv="clr-namespace:FFXIV.Framework.WPF.Converters;assembly=FFXIV.Framework"
  xmlns:global="clr-namespace:FFXIV.Framework.Globalization;assembly=FFXIV.Framework"
  xmlns:local="clr-namespace:ACT.SpecialSpellTimer.Config.Views"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:model="clr-namespace:ACT.SpecialSpellTimer.Config.Models"
  xmlns:triggerModel="clr-namespace:ACT.SpecialSpellTimer.Models"
  xmlns:resources="clr-namespace:ACT.SpecialSpellTimer.resources"
  xmlns:system="clr-namespace:System;assembly=mscorlib"
  xmlns:vm="clr-namespace:ACT.SpecialSpellTimer.Config.ViewModels"
  xmlns:fa="http://schemas.fontawesome.io/icons/"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
  d:DataContext="{d:DesignInstance Type=vm:SpellConfigViewModel}"
  d:DesignWidth="1000"
  Background="White"
  FontFamily="{DynamicResource UIFont}"
  FontSize="{DynamicResource UIFontSize}"
  FontWeight="{DynamicResource UIFontWeight}"
  FontStyle="{DynamicResource UIFontStyle}"
  FontStretch="{DynamicResource UIFontStretch}"
  RenderOptions.BitmapScalingMode="HighQuality"
  RenderOptions.ClearTypeHint="Enabled"
  RenderOptions.EdgeMode="Unspecified"
  TextOptions.TextFormattingMode="Display"
  TextOptions.TextHintingMode="Animated"
  TextOptions.TextRenderingMode="ClearType"
  IsTabStop="False"
  Focusable="False"
  mc:Ignorable="d">

  <UserControl.DataContext>
    <vm:SpellConfigViewModel />
  </UserControl.DataContext>

  <UserControl.Resources>
    <ResourceDictionary>
      <Style TargetType="Label">
        <Setter Property="Padding" Value="0" />
      </Style>

      <Style TargetType="CheckBox">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Style>

      <Style TargetType="TextBox">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="30" />
        <EventSetter Event="MouseDoubleClick" Handler="TextBoxOnGotFocus" />
        <EventSetter Event="GotKeyboardFocus" Handler="TextBoxOnGotFocus" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="TextBoxSelect" />
        <Style.Triggers>
          <Trigger Property="IsReadOnly" Value="True">
            <Setter Property="Foreground" Value="Silver" />
          </Trigger>
        </Style.Triggers>
      </Style>

      <Style TargetType="ComboBox">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="30" />
      </Style>

      <Style TargetType="xctk:DoubleUpDown">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="27" />
      </Style>

      <Style TargetType="xctk:IntegerUpDown">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="27" />
      </Style>

      <FontFamily x:Key="FontAwesome">pack://application:,,,/FontAwesome.WPF;component/#FontAwesome</FontFamily>

      <fwcnv:BoolToCollapsedConverter x:Key="VisibilityConverter" />
      <fwcnv:BoolToCollapsedNegativeConverter x:Key="VisibilityNegativeConverter" />
      <fwcnv:BoolToHiddenConverter x:Key="HiddenConverter" />

      <ResourceDictionary.MergedDictionaries>
        <wpf:DesignTimeResourceDictionary Source="../../resources/strings/Strings.SpeSpe.ja-JP.xaml" />
        <wpf:DesignTimeResourceDictionary Source="../../resources/styles/ConfigViewResources.xaml" />
      </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
  </UserControl.Resources>

  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition />
      <RowDefinition Height="Auto" />
    </Grid.RowDefinitions>

    <TabControl Grid.Row="0" BorderThickness="0" Margin="2 2 0 0" SelectionChanged="TabControl_SelectionChanged">

      <!-- General タブ start -->
      <TabItem Header="General" Padding="20 2 20 2">
        <ScrollViewer
          x:Name="BaseScrollViewer"
          HorizontalScrollBarVisibility="Auto"
          VerticalScrollBarVisibility="Auto"
          Margin="5"
          Padding="0 0 0 20">
          <StackPanel>
            <!-- Name -->
            <Label Content="{DynamicResource Spell_Name}" />
            <TextBox Text="{Binding Model.SpellTitle, Mode=TwoWay}" />

            <!-- ToInstance -->
            <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToInstance}" IsChecked="{Binding Model.ToInstance}" />

            <!-- Tags =>> -->
            <StackPanel x:Name="TagPanel">
              <ItemsControl
                Margin="0 5 0 4"
                ItemsSource="{Binding Tags, Mode=OneWay}">

                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemTemplate>
                  <DataTemplate DataType="{x:Type triggerModel:ItemTags}">
                    <Border Margin="1" Padding="1" CornerRadius="2" BorderThickness="1" BorderBrush="Orange">
                      <StackPanel Orientation="Horizontal">
                        <Label Content="{Binding Tag.Name, Mode=OneWay}" FontSize="14" Margin="2 0 0 0" />
                        <Button
                          Content="X"
                          Margin="5 0 2 0"
                          Command="{Binding RemoveTagCommand, Mode=OneWay}"
                          CommandParameter="{Binding}"
                          Foreground="LightGray"
                          Background="Transparent"
                          BorderBrush="Transparent"
                          BorderThickness="0"
                          FontSize="12"
                          VerticalAlignment="Center"
                          VerticalContentAlignment="Center"
                          HorizontalContentAlignment="Center" />
                      </StackPanel>
                    </Border>
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>

              <TextBlock Margin="2 0 0 0">
                <Hyperlink
                  Command="{Binding AddTagsCommand, Mode=OneWay}"
                  CommandParameter="{Binding Model.Guid, Mode=OneWay}">
                  <TextBlock Text="{DynamicResource Common_AddTags}" FontSize="14" />
                </Hyperlink>
              </TextBlock>
            </StackPanel>
            <!-- <<= Tags  -->

            <!-- パネル -->
            <Label Margin="0 15 0 0" Content="{DynamicResource Common_SpellPanel}" VerticalAlignment="Center" />
            <ComboBox
              ItemsSource="{Binding Panels, Mode=OneWay}"
              DisplayMemberPath="PanelName"
              SelectedValuePath="ID"
              SelectedValue="{Binding Model.PanelID, Mode=TwoWay}"
              SelectionChanged="Panel_SelectionChanged" />

            <!-- Priority -->
            <Label Margin="0 15 0 0" Content="{DynamicResource Spell_SortPriority}" VerticalAlignment="Center" />
            <xctk:DoubleUpDown Value="{Binding Model.DisplayNo, Mode=TwoWay}" MinWidth="80" Increment="1" HorizontalAlignment="Left" />

            <!-- マッチングワード -->
            <Label Margin="0 15 0 0" Content="{DynamicResource Spell_TextToMatch}" />
            <TextBox Text="{Binding Model.Keyword, Mode=TwoWay}" />

            <!-- Use Regex -->
            <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_UserRegex}" IsChecked="{Binding Model.RegexEnabled}" />

            <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
              <!-- Recast Time -->
              <StackPanel Orientation="Horizontal">
                <Label Content="{DynamicResource Spell_RecastTime}" VerticalAlignment="Center" Margin="0 0 5 0" />
                <xctk:DoubleUpDown Value="{Binding Model.RecastTime, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
                <Label Content="{DynamicResource Spell_Secounds}" VerticalAlignment="Center" Margin="5 0 0 0" />
              </StackPanel>

              <!-- Delay to show -->
              <StackPanel Orientation="Horizontal" Margin="20 0 0 0">
                <Label Content="{DynamicResource Spell_DelayToShow}" VerticalAlignment="Center" Margin="0 0 5 0" />
                <xctk:DoubleUpDown Value="{Binding Model.DelayToShow, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
                <Label Content="{DynamicResource Spell_Secounds}" VerticalAlignment="Center" Margin="5 0 0 0" />
              </StackPanel>
            </StackPanel>

            <!-- Recast Time from Action.csv -->
            <StackPanel>
              <CheckBox Content="{DynamicResource Spell_UseActionCsvRecastTime}" IsChecked="{Binding Model.UseActionCsvRecastTime, Mode=TwoWay}" Margin="0 10 0 0" />
              <Label Content="{DynamicResource Spell_ActionCsvItemName}" VerticalAlignment="Center" Margin="0 5 0 0" HorizontalAlignment="Left" Visibility="{Binding Model.UseActionCsvRecastTime, Converter={StaticResource VisibilityConverter}, Mode=OneWay}" />
              <TextBox Text="{Binding Model.HotbarName, Mode=TwoWay}" Width="300" Margin="0 2 0 0" HorizontalAlignment="Left"  Visibility="{Binding Model.UseActionCsvRecastTime, Converter={StaticResource VisibilityConverter}, Mode=OneWay}" />
            </StackPanel>
            <!-- Recast Time from HotbarInfo
            <StackPanel>
              <CheckBox Content="{DynamicResource Spell_UseHotbrRecastTime}" IsChecked="{Binding Model.UseHotbarRecastTime, Mode=TwoWay}" Margin="0 10 0 0" />
              <Label Content="{DynamicResource Spell_HotbarItemName}" VerticalAlignment="Center" Margin="0 5 0 0" HorizontalAlignment="Left" Visibility="{Binding Model.UseHotbarRecastTime, Converter={StaticResource VisibilityConverter}, Mode=OneWay}" />
              <TextBox Text="{Binding Model.HotbarName, Mode=TwoWay}" Width="300" Margin="0 2 0 0" HorizontalAlignment="Left"  Visibility="{Binding Model.UseHotbarRecastTime, Converter={StaticResource VisibilityConverter}, Mode=OneWay}" />
            </StackPanel> -->

            <!-- 延長のマッチングワード -->
            <Label Margin="0 15 0 0" Content="{DynamicResource Spell_TextToExtend}" />
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Label Grid.Column="0" Margin="0 0 5 0" Content="1" VerticalAlignment="Center" />
              <TextBox Grid.Column="1" Margin="0 0 5 0" Text="{Binding Model.KeywordForExtend1, Mode=TwoWay}" />
              <xctk:DoubleUpDown Grid.Column="2" Value="{Binding Model.RecastTimeExtending1, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
              <Label Grid.Column="3" Margin="5 0 0 0" Content="{DynamicResource Spell_ExtendSecounds}" VerticalAlignment="Center" />
            </Grid>

            <Grid Margin="0 5 0 0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Label Grid.Column="0" Margin="0 0 5 0" Content="2" VerticalAlignment="Center" />
              <TextBox Grid.Column="1" Margin="0 0 5 0" Text="{Binding Model.KeywordForExtend2, Mode=TwoWay}" />
              <xctk:DoubleUpDown Grid.Column="2" Value="{Binding Model.RecastTimeExtending2, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
              <Label Grid.Column="3" Margin="5 0 0 0" Content="{DynamicResource Spell_ExtendSecounds}" VerticalAlignment="Center" />
            </Grid>

            <Grid Margin="0 5 0 0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Label Grid.Column="0" Margin="0 0 5 0" Content="3" VerticalAlignment="Center" />
              <TextBox Grid.Column="1" Margin="0 0 5 0" Text="{Binding Model.KeywordForExtend3, Mode=TwoWay}" />
              <xctk:DoubleUpDown Grid.Column="2" Value="{Binding Model.RecastTimeExtending3, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
              <Label Grid.Column="3" Margin="5 0 0 0" Content="{DynamicResource Spell_ExtendSecounds}" VerticalAlignment="Center" />
            </Grid>

            <!-- 元のリキャストタイムを超えて延長する -->
            <CheckBox Margin="0 10 0 0" Content="{DynamicResource Spell_ExtendRecastTimeOverOrigal}" IsChecked="{Binding Model.ExtendBeyondOriginalRecastTime}" />
            <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_IsNotResetBarOnExtended}" IsChecked="{Binding Model.IsNotResetBarOnExtended}" />

            <!-- Recast Time -->
            <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
              <Label Content="{DynamicResource Spell_UpperLimitOfRecastTime}" VerticalAlignment="Center" Margin="0 0 10 0" />
              <xctk:DoubleUpDown Value="{Binding Model.UpperLimitOfExtension, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
              <Label Content="{DynamicResource Spell_Secounds}" VerticalAlignment="Center" Margin="5 0 0 0" />
            </StackPanel>

            <!-- Warning -->
            <StackPanel Orientation="Horizontal" Margin="0 15 0 0">
              <xctk:DoubleUpDown Value="{Binding Model.WarningTime, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
              <Label Content="{DynamicResource Spell_WarningTime}" VerticalAlignment="Center" Margin="5 0 0 0" />
            </StackPanel>
            <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_WarningTimeChangeFontColor}" IsChecked="{Binding Model.ChangeFontColorsWhenWarning}" />

            <!-- Blink -->
            <StackPanel Orientation="Horizontal" Margin="0 15 0 0">
              <xctk:DoubleUpDown Value="{Binding Model.BlinkTime, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" />
              <Label Content="{DynamicResource Spell_BlinkTime}" VerticalAlignment="Center" Margin="5 0 0 0" />
            </StackPanel>
            <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_BlinkIcon}" IsChecked="{Binding Model.BlinkIcon}" />
            <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_BlinkBar}" IsChecked="{Binding Model.BlinkBar}" />

            <!-- Jobフィルタ start -->
            <Expander Margin="0 20 0 0" Expanded="FilterExpander_Expanded">
              <Expander.Header>
                <StackPanel Orientation="Horizontal">
                  <Label Content="{DynamicResource Trigger_JobFilter}" VerticalAlignment="Center" VerticalContentAlignment="Center" />
                  <Label Margin="20 0 0 0" Content="filtered!" FontSize="14" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="Crimson" FontStyle="Italic" FontWeight="Black" Visibility="{Binding IsJobFiltered, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" />
                </StackPanel>
              </Expander.Header>

              <Grid>
                <TextBlock Margin="0 3 0 5">
                  <Hyperlink
                    Command="{Binding ClearJobFilterCommand, Mode=OneWay}">
                    <TextBlock Text="{DynamicResource Trigger_ClearFilter}" />
                  </Hyperlink>
                </TextBlock>

                <ListView
                  Margin="0 30 0 0"
                  BorderThickness="0"
                  ItemsSource="{Binding JobSelectors, Mode=OneWay}"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  ScrollViewer.VerticalScrollBarVisibility="Disabled"
                  Height="200">
                  <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                      <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                  </ListView.ItemContainerStyle>
                  <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                      <WrapPanel Orientation="Vertical" />
                    </ItemsPanelTemplate>
                  </ListView.ItemsPanel>
                  <ListView.ItemTemplate>
                    <DataTemplate>
                      <CheckBox
                        Margin="0 2 20 2"
                        FontSize="15"
                        Content="{Binding Text, Mode=OneWay}"
                        IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                    </DataTemplate>
                  </ListView.ItemTemplate>
                </ListView>
              </Grid>
            </Expander>
            <!-- Jobフィルタ end -->

            <!--Party Jobフィルタ start -->
            <Expander Margin="0 10 0 0" Expanded="FilterExpander_Expanded">
              <Expander.Header>
                <StackPanel Orientation="Horizontal">
                  <Label Content="{DynamicResource Trigger_PartyJobFilter}" VerticalAlignment="Center" VerticalContentAlignment="Center" />
                  <Label Margin="20 0 0 0" Content="filtered!" FontSize="14" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="Crimson" FontStyle="Italic" FontWeight="Black" Visibility="{Binding IsPartyJobFiltered, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" />
                </StackPanel>
              </Expander.Header>
              <Grid>
                <TextBlock Margin="0 3 0 5">
                  <Hyperlink Command="{Binding ClearPartyJobFilterCommand, Mode=OneWay}">
                    <TextBlock Text="{DynamicResource Trigger_ClearFilter}" />
                  </Hyperlink>
                </TextBlock>
                <ListView
                  Margin="0 30 0 0"
                  BorderThickness="0"
                  ItemsSource="{Binding PartyJobSelectors, Mode=OneWay}"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  ScrollViewer.VerticalScrollBarVisibility="Disabled"
                  Height="200">
                  <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                      <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                  </ListView.ItemContainerStyle>
                  <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                      <WrapPanel Orientation="Vertical" />
                    </ItemsPanelTemplate>
                  </ListView.ItemsPanel>
                  <ListView.ItemTemplate>
                    <DataTemplate>
                      <CheckBox Margin="0 2 20 2" FontSize="15"  Content="{Binding Text, Mode=OneWay}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                    </DataTemplate>
                  </ListView.ItemTemplate>
                </ListView>
              </Grid>
            </Expander>
            <!--Party Jobフィルタ end -->

            <!--Party Compositionフィルタ start -->
            <Expander Margin="0 10 0 0" Expanded="FilterExpander_Expanded">
              <Expander.Header>
                <StackPanel Orientation="Horizontal">
                  <Label Content="{DynamicResource Trigger_PartyCompositionFilter}" VerticalAlignment="Center" VerticalContentAlignment="Center" />
                  <Label Margin="20 0 0 0" Content="filtered!" FontSize="14" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="Crimson" FontStyle="Italic" FontWeight="Black" Visibility="{Binding IsPartyCompositionFiltered, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" />
                </StackPanel>
              </Expander.Header>
              <Grid>
                <TextBlock Margin="0 3 0 5">
                  <Hyperlink Command="{Binding ClearPartyCompositionFilterCommand, Mode=OneWay}">
                    <TextBlock Text="{DynamicResource Trigger_ClearFilter}" />
                  </Hyperlink>
                </TextBlock>
                <ListView
                  Margin="0 30 0 0"
                  BorderThickness="0"
                  ItemsSource="{Binding PartyCompositionSelectors, Mode=OneWay}"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  ScrollViewer.VerticalScrollBarVisibility="Disabled"
                  Height="85">
                  <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                      <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                  </ListView.ItemContainerStyle>
                  <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                      <WrapPanel Orientation="Vertical" />
                    </ItemsPanelTemplate>
                  </ListView.ItemsPanel>
                  <ListView.ItemTemplate>
                    <DataTemplate>
                      <CheckBox Margin="0 2 20 2" FontSize="15"  Content="{Binding Text, Mode=OneWay}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                    </DataTemplate>
                  </ListView.ItemTemplate>
                </ListView>
              </Grid>
            </Expander>
            <!--Party Compositionフィルタ end -->

            <!-- Expressionフィルタ start -->
            <Expander Margin="0 10 0 0" Expanded="FilterExpander_Expanded">
              <Expander.Header>
                <StackPanel Orientation="Horizontal">
                  <Label Content="{DynamicResource Trigger_ExpressionFilter}" VerticalAlignment="Center" VerticalContentAlignment="Center" />
                  <Label Margin="20 0 0 0" Content="filtered!" FontSize="14" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="Crimson" FontStyle="Italic" FontWeight="Black" Visibility="{Binding IsExpressionFiltered, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" />
                </StackPanel>
              </Expander.Header>
              <Grid
                Margin="10 10 0 0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="24" />
                  <RowDefinition Height="33" />
                  <RowDefinition Height="33" />
                  <RowDefinition Height="33" />
                  <RowDefinition Height="33" />
                  <RowDefinition />
                </Grid.RowDefinitions>

                <Label Grid.Row="0" Grid.Column="1" Margin="2 0 0 0" Content="Target" />
                <Label Grid.Row="0" Grid.Column="2" Margin="7 0 0 0" Content="Regex" />

                <Label Grid.Row="1" Grid.Column="0" Content="1" VerticalAlignment="Center" Margin="0 0 5 0" />
                <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Model.ExpressionFilters[0].Target, Mode=TwoWay}" Width="320" />
                <TextBox Grid.Row="1" Grid.Column="2" Margin="5 0 0 0" Text="{Binding Model.ExpressionFilters[0].Pattern, Mode=TwoWay}" Width="320" />

                <Label Grid.Row="2" Grid.Column="0" Content="2" VerticalAlignment="Center" Margin="0 0 5 0" />
                <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding Model.ExpressionFilters[1].Target, Mode=TwoWay}" Width="320" />
                <TextBox Grid.Row="2" Grid.Column="2" Margin="5 0 0 0" Text="{Binding Model.ExpressionFilters[1].Pattern, Mode=TwoWay}" Width="320" />

                <Label Grid.Row="3" Grid.Column="0" Content="3" VerticalAlignment="Center" Margin="0 0 5 0" />
                <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding Model.ExpressionFilters[2].Target, Mode=TwoWay}" Width="320" />
                <TextBox Grid.Row="3" Grid.Column="2" Margin="5 0 0 0" Text="{Binding Model.ExpressionFilters[2].Pattern, Mode=TwoWay}" Width="320" />

                <Label Grid.Row="4" Grid.Column="0" Content="4" VerticalAlignment="Center" Margin="0 0 5 0" />
                <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding Model.ExpressionFilters[3].Target, Mode=TwoWay}" Width="320" />
                <TextBox Grid.Row="4" Grid.Column="2" Margin="5 0 0 0" Text="{Binding Model.ExpressionFilters[3].Pattern, Mode=TwoWay}" Width="320" />

                <TextBlock
                  Grid.Row="5"
                  Grid.ColumnSpan="3"
                  Margin="15 5 0 0"
                  FontSize="14"
                  Text="{DynamicResource Trigger_ExpressionFilterExample}" />
              </Grid>
            </Expander>
            <!-- Expressionフィルタ end -->

            <!-- Zoneフィルタ start -->
            <Expander Margin="0 10 0 0" Expanded="FilterExpander_Expanded">
              <Expander.Header>
                <StackPanel Orientation="Horizontal">
                  <Label Content="{DynamicResource Trigger_ZoneFilter}" VerticalAlignment="Center" VerticalContentAlignment="Center" />
                  <Label Margin="20 0 0 0" Content="filtered!" FontSize="14" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="Crimson" FontStyle="Italic" FontWeight="Black" Visibility="{Binding IsZoneFiltered, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" />
                </StackPanel>
              </Expander.Header>

              <Grid>
                <TextBlock Margin="0 3 0 5">
                  <Hyperlink
                    Command="{Binding ClearZoneFilterCommand, Mode=OneWay}">
                    <TextBlock Text="{DynamicResource Trigger_ClearFilter}" />
                  </Hyperlink>
                </TextBlock>

                <ListView
                  Margin="0 30 0 0"
                  BorderThickness="0"
                  ItemsSource="{Binding ZoneSelectors, Mode=OneWay}"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  ScrollViewer.VerticalScrollBarVisibility="Disabled"
                  Height="400">
                  <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                      <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                  </ListView.ItemContainerStyle>
                  <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                      <WrapPanel Orientation="Vertical" />
                    </ItemsPanelTemplate>
                  </ListView.ItemsPanel>
                  <ListView.ItemTemplate>
                    <DataTemplate>
                      <CheckBox
                        Margin="0 2 20 2"
                        FontSize="15"
                        Content="{Binding Name, Mode=OneWay}"
                        IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                    </DataTemplate>
                  </ListView.ItemTemplate>
                </ListView>
              </Grid>
            </Expander>
            <!-- Zoneフィルタ end -->

            <!-- Preconditionフィルタ start -->
            <Expander Margin="0 10 0 0" Expanded="FilterExpander_Expanded">
              <Expander.Header>
                <StackPanel Orientation="Horizontal">
                  <Label Content="{DynamicResource Trigger_Preconditions}" VerticalAlignment="Center" VerticalContentAlignment="Center" />
                  <Label Margin="20 0 0 0" Content="filtered!" FontSize="14" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="Crimson" FontStyle="Italic" FontWeight="Black" Visibility="{Binding PreconditionSelectors.IsFiltered, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" />
                </StackPanel>
              </Expander.Header>

              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="7*" />
                  <ColumnDefinition Width="484*" />
                </Grid.ColumnDefinitions>
                <TextBlock Margin="0 3 0 5" Grid.ColumnSpan="2">
                  <Hyperlink
                    Command="{Binding ClearPreconditionsCommand, Mode=OneWay}">
                    <TextBlock Text="{DynamicResource Trigger_ClearFilter}" />
                  </Hyperlink>
                </TextBlock>

                <Grid Margin="0 35 0 0" Grid.ColumnSpan="2">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>

                  <!-- 稼働スペル -->
                  <StackPanel Grid.Row="0" Grid.Column="0">
                    <Label Content="{DynamicResource Trigger_ForMustStartRunningSpell}" />
                    <ListView
                      BorderThickness="0"
                      Margin="0 5 0 0"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      Height="250"
                      ItemsSource="{Binding PreconditionSelectors.ActiveSpells, Mode=OneWay}">
                      <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                      </ListView.ItemContainerStyle>
                      <ListView.ItemTemplate>
                        <DataTemplate>
                          <CheckBox
                            Margin="2 0 10 0"
                            Content="{Binding Text, Mode=OneWay}"
                            IsChecked="{Binding IsSelected, Mode=TwoWay}"
                            FontSize="15" />
                        </DataTemplate>
                      </ListView.ItemTemplate>
                    </ListView>
                  </StackPanel>

                  <!-- 非稼働スペル -->
                  <StackPanel Grid.Row="0" Grid.Column="1" Margin="10 0 0 0">
                    <Label Content="{DynamicResource Trigger_ForMustStartStoppingSpell}" />
                    <ListView
                      BorderThickness="0"
                      Margin="0 5 0 0"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      Height="250"
                      ItemsSource="{Binding PreconditionSelectors.InactiveSpells, Mode=OneWay}">
                      <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                      </ListView.ItemContainerStyle>
                      <ListView.ItemTemplate>
                        <DataTemplate>
                          <CheckBox
                            Margin="2 0 10 0"
                            Content="{Binding Text, Mode=OneWay}"
                            IsChecked="{Binding IsSelected, Mode=TwoWay}"
                            FontSize="15" />
                        </DataTemplate>
                      </ListView.ItemTemplate>
                    </ListView>
                  </StackPanel>

                  <!-- 稼働テロップ -->
                  <StackPanel Grid.Row="1" Grid.Column="0" Margin="0 10 0 0">
                    <Label Content="{DynamicResource Trigger_ForMustStartRunningTicker}" />
                    <ListView
                      BorderThickness="0"
                      Margin="0 5 0 0"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      Height="250"
                      ItemsSource="{Binding PreconditionSelectors.ActiveTickers, Mode=OneWay}">
                      <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                      </ListView.ItemContainerStyle>
                      <ListView.ItemTemplate>
                        <DataTemplate>
                          <CheckBox
                            Margin="2 0 10 0"
                            Content="{Binding Text, Mode=OneWay}"
                            IsChecked="{Binding IsSelected, Mode=TwoWay}"
                            FontSize="15" />
                        </DataTemplate>
                      </ListView.ItemTemplate>
                    </ListView>
                  </StackPanel>

                  <!-- 非稼働テロップ -->
                  <StackPanel Grid.Row="1" Grid.Column="1" Margin="10 10 0 0">
                    <Label Content="{DynamicResource Trigger_ForMustStartStoppingTicker}" />
                    <ListView
                      BorderThickness="0"
                      Margin="0 5 0 0"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      ScrollViewer.VerticalScrollBarVisibility="Auto"
                      Height="250"
                      ItemsSource="{Binding PreconditionSelectors.InactiveTickers, Mode=OneWay}">
                      <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                      </ListView.ItemContainerStyle>
                      <ListView.ItemTemplate>
                        <DataTemplate>
                          <CheckBox
                            Margin="2 0 10 0"
                            Content="{Binding Text, Mode=OneWay}"
                            IsChecked="{Binding IsSelected, Mode=TwoWay}"
                            FontSize="15" />
                        </DataTemplate>
                      </ListView.ItemTemplate>
                    </ListView>
                  </StackPanel>
                </Grid>
              </Grid>
            </Expander>
            <!-- Preconditionフィルタ end -->

            <!-- Misc -->
            <Label Margin="0 15 0 0" Content="{DynamicResource Common_Misc}" FontWeight="Bold" />
            <StackPanel Margin="5 5 0 0">
              <CheckBox Content="{DynamicResource Spell_NotResetAtWipeout}" IsChecked="{Binding Model.IsNotResetAtWipeout, Mode=TwoWay}" />
            </StackPanel>
          </StackPanel>
        </ScrollViewer>
      </TabItem>
      <!-- General タブ end -->

      <!-- Visual タブ start -->
      <TabItem x:Name="VisualTab" Header="Visual" Padding="20 2 20 2">
        <ScrollViewer
          HorizontalScrollBarVisibility="Auto"
          VerticalScrollBarVisibility="Auto"
          Margin="5"
          Padding="0 0 0 20">

          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!-- Visualタブの左側 -->
            <StackPanel Grid.Column="0" Margin="0 0 90 0">
              <!-- フォント -->
              <Label Content="{DynamicResource Common_Font}" FontSize="20" FontWeight="Bold" />
              <StackPanel Margin="10 0 0 0">
                <TextBlock HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeFontCommand}">
                    <TextBlock Text="{Binding Model.Font.DisplayText}" />
                  </Hyperlink>
                </TextBlock>

                <TextBlock Margin="0 3 0 0" HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeFontColorCommand}">
                    <TextBlock Text="{DynamicResource Common_FillColor}" />
                  </Hyperlink>
                </TextBlock>

                <TextBlock Margin="0 3 0 0" HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeFontOutlineColorCommand}">
                    <TextBlock Text="{DynamicResource Common_StrokeColor}" />
                  </Hyperlink>
                </TextBlock>

                <TextBlock Margin="0 8 0 0" HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeWarningFontColorCommand}">
                    <TextBlock Text="{DynamicResource Common_WarningFillColor}" />
                  </Hyperlink>
                </TextBlock>

                <TextBlock Margin="0 3 0 0" HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeWarningFontOutlineColorCommand}">
                    <TextBlock Text="{DynamicResource Common_WarningStrokeColor}" />
                  </Hyperlink>
                </TextBlock>

                <!-- Warning -->
                <StackPanel Orientation="Horizontal" Margin="0 15 0 0">
                  <xctk:DoubleUpDown Value="{Binding Model.WarningTime, Mode=TwoWay}" FormatString="F2" MinWidth="90" Increment="1" VerticalAlignment="Center" />
                  <Label VerticalAlignment="Center" Margin="5 0 0 0" MaxWidth="300">
                    <TextBlock TextWrapping="WrapWithOverflow" Text="{DynamicResource Spell_WarningTime}" />
                  </Label>
                </StackPanel>
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_WarningTimeChangeFontColor}" IsChecked="{Binding Model.ChangeFontColorsWhenWarning, Mode=TwoWay}" />
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ChangeColorWhenContainsMe}" IsChecked="{Binding Model.ChangeFontColorWhenContainsMe, Mode=TwoWay}" />
              </StackPanel>

              <!-- プログレスバー -->
              <Label Margin="0 20 0 0" Content="{DynamicResource Common_ProgressBar}" FontSize="20" FontWeight="Bold" />
              <StackPanel Margin="10 0 0 0">
                <CheckBox Margin="0 5 0 5" Content="Circle Style" IsChecked="{Binding Model.IsCircleStyle, Mode=TwoWay}" FontWeight="Bold" />
                <CheckBox Margin="0 5 0 5" Content="{DynamicResource Common_IsReverseProgressBar}" IsChecked="{Binding Model.IsReverse, Mode=TwoWay}" />

                <StackPanel Margin="0 8 0 8" Orientation="Horizontal">
                  <TextBlock Margin="6 0 5 0" Text="W" VerticalAlignment="Center" />
                  <xctk:DoubleUpDown Value="{Binding Model.BarWidth, Mode=TwoWay}" Increment="1" MinWidth="80" Minimum="0" />
                  <TextBlock Margin="10 0 5 0" Text="H" VerticalAlignment="Center" />
                  <xctk:DoubleUpDown Value="{Binding Model.BarHeight, Mode=TwoWay}" Increment="1" MinWidth="80" Minimum="0" />
                </StackPanel>

                <TextBlock Margin="0 3 0 0" HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeBarColorCommand}">
                    <TextBlock Text="{DynamicResource Common_FillColor}" />
                  </Hyperlink>
                </TextBlock>

                <TextBlock Margin="0 3 0 0" HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeBarOutlineColorCommand}">
                    <TextBlock Text="{DynamicResource Common_StrokeColor}" />
                  </Hyperlink>
                </TextBlock>

                <StackPanel Orientation="Horizontal" Margin="0 6 0 0">
                  <Label Content="{DynamicResource Common_BlurRadius}" VerticalAlignment="Center" Margin="0 0 7 0" />
                  <xctk:DoubleUpDown Value="{Binding Model.BarBlurRadius, Mode=TwoWay}" Increment="1"  HorizontalAlignment="Left" Width="70" FormatString="N0" Minimum="0" />
                </StackPanel>
              </StackPanel>

              <!-- 背景色 -->
              <Label Margin="0 20 0 0" Content="{DynamicResource Common_Background}" FontSize="20" FontWeight="Bold" />
              <StackPanel Margin="10 0 0 0">
                <TextBlock Margin="0 3 0 0" HorizontalAlignment="Left">
                  <Hyperlink Command="{Binding ChangeBackgroundColorCommand}">
                    <TextBlock Text="{DynamicResource Common_FillColor}" />
                  </Hyperlink>
                </TextBlock>
              </StackPanel>
            </StackPanel>
            <!-- Visualタブの左側 end -->

            <!-- Visualタブの右側 -->
            <StackPanel Grid.Column="1" Margin="0 0 40 0">
              <!-- アイコン -->
              <Label Margin="0 0 0 0" Content="{DynamicResource Common_Icon}" FontSize="20" FontWeight="Bold" />
              <StackPanel Margin="10 0 0 0">
                <StackPanel Margin="0 8 0 8" Orientation="Horizontal">
                  <Border BorderBrush="LightGray" BorderThickness="1" CornerRadius="6">
                    <Image Source="{Binding Model.SpellIconImage, Mode=OneWay}" Height="72" Width="72" />
                  </Border>
                  <StackPanel VerticalAlignment="Bottom">
                    <TextBlock Margin="10 0 0 10" HorizontalAlignment="Left">
                      <Hyperlink Command="{Binding SelectIconCommand, Mode=OneWay}">
                        <TextBlock Text="{DynamicResource Common_SelectIcon}" />
                      </Hyperlink>
                    </TextBlock>

                    <StackPanel Orientation="Horizontal">
                      <TextBlock Margin="10 0 5 2" Text="Size" VerticalAlignment="Bottom" />
                      <xctk:DoubleUpDown Value="{Binding Model.SpellIconSize, Mode=TwoWay}" Increment="1" MinWidth="65" VerticalAlignment="Bottom" Minimum="0" />
                    </StackPanel>
                  </StackPanel>
                </StackPanel>

                <CheckBox Margin="0 0 0 0" Content="{DynamicResource Common_RecastTimeOverIcon}" IsChecked="{Binding Model.OverlapRecastTime, Mode=TwoWay}" Visibility="{Binding Model.IsStandardStyle, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" />
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Common_ToDarkBetweenRecast}" IsChecked="{Binding Model.ReduceIconBrightness, Mode=TwoWay}" />

                <TextBlock Margin="0 10 0 0" HorizontalAlignment="Left">
                  <Hyperlink NavigateUri="https://github.com/anoyetta/ACT.Hojoring/issues/440" RequestNavigate = "Hyperlink_RequestNavigate">
                    <TextBlock Text="{DynamicResource Common_GetIcon}" />
                  </Hyperlink>
                </TextBlock>

              </StackPanel>

              <!-- その他 -->
              <Label Margin="0 20 0 0" Content="{DynamicResource Common_Misc}" FontSize="20" FontWeight="Bold" />
              <StackPanel Margin="10 0 0 0">
                <StackPanel
                  Margin="0 5 0 0"
                  Visibility="{Binding Model.IsCircleStyle, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                  <TextBlock Text="{DynamicResource Spell_TitleVAlignment}" />
                  <ComboBox
                    HorizontalAlignment="Left"
                    Width="110"
                    ItemsSource="{Binding TitleVerticalAlignments, Mode=OneWay}"
                    SelectedItem="{Binding Model.TitleVerticalAlignmentInCircle, Mode=TwoWay}" />
                </StackPanel>
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Common_HideSpellName}" IsChecked="{Binding Model.HideSpellName, Mode=TwoWay}" />
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_HideCounter}" IsChecked="{Binding Model.HideCounter, Mode=TwoWay}" />
                <DockPanel
                  Visibility="{Binding Model.IsStandardStyle, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                  <CheckBox Margin="0 5 0 0" Content="{DynamicResource Common_IsCounterToCenter}" IsChecked="{Binding Model.IsCounterToCenter, Mode=TwoWay}" Visibility="{Binding Model.OverlapRecastTime, Mode=OneWay, Converter={StaticResource VisibilityNegativeConverter}}" />
                </DockPanel>
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Common_DontHide}" IsChecked="{Binding Model.DontHide, Mode=TwoWay}" />
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_HideInNotCombat}" IsChecked="{Binding Model.IsHideInNotCombat, Mode=TwoWay}" />
                <CheckBox Margin="0 5 0 0" Content="{DynamicResource Common_VisibleSpell}" IsChecked="{Binding Model.ProgressBarVisible, Mode=TwoWay}" ToolTip="{DynamicResource Common_VisibleSpellDiscription}" />
              </StackPanel>
            </StackPanel>
          </Grid>
        </ScrollViewer>
      </TabItem>
      <!-- Visual タブ end -->

      <!-- Notice タブ start -->
      <TabItem Header="Notice"  Padding="20 2 20 2">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>

          <ScrollViewer
            Grid.Row="0"
            HorizontalScrollBarVisibility="Disabled"
            VerticalScrollBarVisibility="Auto"
            Margin="5"
            Padding="0 0 0 20">

            <WrapPanel Orientation="Horizontal">
              <!-- Match start -->
              <StackPanel Margin="0 0 50 40" VerticalAlignment="Top">
                <Label Content="{DynamicResource Spell_NoticeOnMatch}" FontSize="20" FontWeight="Bold" />
                <StackPanel Margin="5 10 0 0" Width="450">
                  <Label DockPanel.Dock="Left" Content="WAVE" />
                  <DockPanel>
                    <ComboBox
                      DockPanel.Dock="Left"
                      HorizontalAlignment="Left"
                      Width="415"
                      ItemsSource="{x:Static vm:SpellConfigViewModel.WaveList}"
                      DisplayMemberPath="Name"
                      SelectedValuePath="FullPath"
                      SelectedValue="{Binding Model.MatchSound, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="♪" HorizontalAlignment="Right" Width="28" FontWeight="Black" Command="{Binding TestWave1Command}" />
                  </DockPanel>
                  <Label Margin="0 10 0 0" Content="TTS" />
                  <DockPanel>
                    <TextBox DockPanel.Dock="Left" Width="415" HorizontalAlignment="Left" Text="{Binding Model.MatchTextToSpeak, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="▶" HorizontalAlignment="Right" Width="28" FontWeight="Black" FontSize="11"  Command="{Binding TestTTS1Command}" />
                  </DockPanel>
                  <StackPanel Visibility="{Binding Model.MatchAdvancedConfig.Available, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                    <CheckBox Margin="0 15 0 0" Content="{DynamicResource Spell_UseAdvancedNotice}" IsChecked="{Binding Model.MatchAdvancedConfig.IsEnabled, Mode=TwoWay}" />
                    <StackPanel Margin="0 5 0 0" Visibility="{Binding Model.MatchAdvancedConfig.IsEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToMainPlaybackDevice}" IsChecked="{Binding Model.MatchAdvancedConfig.ToMainDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToSubPlaybackDevice}" IsChecked="{Binding Model.MatchAdvancedConfig.ToSubDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToDicordTextChannel}" IsChecked="{Binding Model.MatchAdvancedConfig.ToDicordTextChat, Mode=TwoWay}" />
                      <StackPanel Margin="0 5 0 0" Orientation="Horizontal">
                        <Label VerticalAlignment="Center" Margin="0 2 5 0" Content="{DynamicResource Spell_PlayPalette}" />
                        <ComboBox Width="100" ItemsSource="{Binding Model.MatchAdvancedConfig.Palettes, Mode=OneWay}" SelectedItem="{Binding Model.MatchAdvancedConfig.Palette, Mode=TwoWay}" />
                      </StackPanel>
                    </StackPanel>
                  </StackPanel>
                </StackPanel>
              </StackPanel>
              <!-- Match end -->

              <!-- Over start -->
              <StackPanel Margin="0 0 50 40" VerticalAlignment="Top">
                <Label Content="{DynamicResource Spell_NoticeOnOver}" FontSize="20" FontWeight="Bold" />
                <StackPanel Margin="5 10 0 0" Width="450">
                  <Label Content="WAVE" />
                  <DockPanel>
                    <ComboBox
                      DockPanel.Dock="Left"
                      HorizontalAlignment="Left"
                      Width="415"
                      ItemsSource="{x:Static vm:SpellConfigViewModel.WaveList}"
                      DisplayMemberPath="Name"
                      SelectedValuePath="FullPath"
                      SelectedValue="{Binding Model.OverSound, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="♪" HorizontalAlignment="Right" Width="28" FontWeight="Black" Command="{Binding TestWave2Command}" />
                  </DockPanel>
                  <Label Margin="0 10 0 0" Content="TTS" />
                  <DockPanel>
                    <TextBox DockPanel.Dock="Left" HorizontalAlignment="Left" Width="415" Text="{Binding Model.OverTextToSpeak, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="▶" HorizontalAlignment="Right" Width="28" FontWeight="Black" FontSize="11"  Command="{Binding TestTTS2Command}" />
                  </DockPanel>
                  <StackPanel Margin="0 15 0 0" Orientation="Horizontal">
                    <xctk:DoubleUpDown Increment="1" FormatString="F1" MinWidth="80" Value="{Binding Model.OverTime, Mode=TwoWay}" />
                    <Label Margin="5 0 0 0" Content="{DynamicResource Spell_NoticeOnOverThisScounds}" VerticalAlignment="Center" />
                  </StackPanel>
                  <StackPanel Visibility="{Binding Model.OverAdvancedConfig.Available, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                    <CheckBox Margin="0 15 0 0" Content="{DynamicResource Spell_UseAdvancedNotice}" IsChecked="{Binding Model.OverAdvancedConfig.IsEnabled, Mode=TwoWay}" />
                    <StackPanel Margin="0 5 0 0" Visibility="{Binding Model.OverAdvancedConfig.IsEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToMainPlaybackDevice}" IsChecked="{Binding Model.OverAdvancedConfig.ToMainDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToSubPlaybackDevice}" IsChecked="{Binding Model.OverAdvancedConfig.ToSubDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToDicordTextChannel}" IsChecked="{Binding Model.OverAdvancedConfig.ToDicordTextChat, Mode=TwoWay}" />
                      <StackPanel Margin="0 5 0 0" Orientation="Horizontal">
                        <Label VerticalAlignment="Center" Margin="0 0 5 0" Content="{DynamicResource Spell_PlayPalette}" />
                        <ComboBox Width="100" ItemsSource="{Binding Model.OverAdvancedConfig.Palettes, Mode=OneWay}" SelectedItem="{Binding Model.OverAdvancedConfig.Palette, Mode=TwoWay}" />
                      </StackPanel>
                    </StackPanel>
                  </StackPanel>
                </StackPanel>
              </StackPanel>
              <!-- Over end -->

              <!-- Before start -->
              <StackPanel Margin="0 0 50 40" VerticalAlignment="Top">
                <Label Content="{DynamicResource Spell_NoticeOnBefore}" FontSize="20" FontWeight="Bold" />
                <StackPanel Margin="5 10 0 0" Width="450">
                  <Label Content="WAVE" />
                  <DockPanel>
                    <ComboBox
                      DockPanel.Dock="Left"
                      HorizontalAlignment="Left"
                      Width="415"
                      ItemsSource="{x:Static vm:SpellConfigViewModel.WaveList}"
                      DisplayMemberPath="Name"
                      SelectedValuePath="FullPath"
                      SelectedValue="{Binding Model.BeforeSound, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="♪" HorizontalAlignment="Right" Width="28" FontWeight="Black" Command="{Binding TestWave3Command}" />
                  </DockPanel>
                  <Label Margin="0 10 0 0" Content="TTS" />
                  <DockPanel>
                    <TextBox DockPanel.Dock="Left" HorizontalAlignment="Left" Width="415" Text="{Binding Model.BeforeTextToSpeak, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="▶" HorizontalAlignment="Right" Width="28" FontWeight="Black" FontSize="11"  Command="{Binding TestTTS3Command}" />
                  </DockPanel>
                  <StackPanel Margin="0 15 0 0" Orientation="Horizontal">
                    <xctk:DoubleUpDown Increment="1" FormatString="F1" MinWidth="80" Value="{Binding Model.BeforeTime, Mode=TwoWay}" />
                    <Label Margin="5 0 0 0" Content="{DynamicResource Spell_NoticeOnBeforeThisScounds}" VerticalAlignment="Center" />
                  </StackPanel>
                  <StackPanel Visibility="{Binding Model.BeforeAdvancedConfig.Available, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                    <CheckBox Margin="0 15 0 0" Content="{DynamicResource Spell_UseAdvancedNotice}" IsChecked="{Binding Model.BeforeAdvancedConfig.IsEnabled, Mode=TwoWay}" />
                    <StackPanel Margin="0 5 0 0" Visibility="{Binding Model.BeforeAdvancedConfig.IsEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToMainPlaybackDevice}" IsChecked="{Binding Model.BeforeAdvancedConfig.ToMainDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToSubPlaybackDevice}" IsChecked="{Binding Model.BeforeAdvancedConfig.ToSubDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToDicordTextChannel}" IsChecked="{Binding Model.BeforeAdvancedConfig.ToDicordTextChat, Mode=TwoWay}" />
                      <StackPanel Margin="0 5 0 0" Orientation="Horizontal">
                        <Label VerticalAlignment="Center" Margin="0 0 5 0" Content="{DynamicResource Spell_PlayPalette}" />
                        <ComboBox Width="100" ItemsSource="{Binding Model.BeforeAdvancedConfig.Palettes, Mode=OneWay}" SelectedItem="{Binding Model.BeforeAdvancedConfig.Palette, Mode=TwoWay}" />
                      </StackPanel>
                    </StackPanel>
                  </StackPanel>
                </StackPanel>
              </StackPanel>
              <!-- Before end -->

              <!-- Timeup start -->
              <StackPanel Margin="0 0 50 40" VerticalAlignment="Top">
                <Label Content="{DynamicResource Spell_NoticeOnTimeup}" FontSize="20" FontWeight="Bold" />
                <StackPanel Margin="5 10 0 0" Width="450">
                  <Label Content="WAVE" />
                  <DockPanel>
                    <ComboBox
                      DockPanel.Dock="Left"
                      HorizontalAlignment="Left"
                      Width="415"
                      ItemsSource="{x:Static vm:SpellConfigViewModel.WaveList}"
                      DisplayMemberPath="Name"
                      SelectedValuePath="FullPath"
                      SelectedValue="{Binding Model.TimeupSound, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="♪" HorizontalAlignment="Right" Width="28" FontWeight="Black" Command="{Binding TestWave4Command}" />
                  </DockPanel>
                  <Label Margin="0 10 0 0" Content="TTS" />
                  <DockPanel>
                    <TextBox DockPanel.Dock="Left" HorizontalAlignment="Left" Width="415" Text="{Binding Model.TimeupTextToSpeak, Mode=TwoWay}" />
                    <Button DockPanel.Dock="Right" Content="▶" HorizontalAlignment="Right" Width="28" FontWeight="Black" FontSize="11"  Command="{Binding TestTTS4Command}" />
                  </DockPanel>
                  <StackPanel Visibility="{Binding Model.TimeupAdvancedConfig.Available, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                    <CheckBox Margin="0 15 0 0" Content="{DynamicResource Spell_UseAdvancedNotice}" IsChecked="{Binding Model.TimeupAdvancedConfig.IsEnabled, Mode=TwoWay}" />
                    <StackPanel Margin="0 5 0 0" Visibility="{Binding Model.TimeupAdvancedConfig.IsEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}">
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToMainPlaybackDevice}" IsChecked="{Binding Model.TimeupAdvancedConfig.ToMainDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToSubPlaybackDevice}" IsChecked="{Binding Model.TimeupAdvancedConfig.ToSubDevice, Mode=TwoWay}" />
                      <CheckBox Margin="0 5 0 0" Content="{DynamicResource Spell_ToDicordTextChannel}" IsChecked="{Binding Model.TimeupAdvancedConfig.ToDicordTextChat, Mode=TwoWay}" />
                      <StackPanel Margin="0 5 0 0" Orientation="Horizontal">
                        <Label VerticalAlignment="Center" Margin="0 0 5 0" Content="{DynamicResource Spell_PlayPalette}" />
                        <ComboBox Width="100" ItemsSource="{Binding Model.TimeupAdvancedConfig.Palettes, Mode=OneWay}" SelectedItem="{Binding Model.TimeupAdvancedConfig.Palette, Mode=TwoWay}" />
                      </StackPanel>
                    </StackPanel>
                  </StackPanel>
                </StackPanel>
              </StackPanel>
              <!-- Before end -->
            </WrapPanel>
          </ScrollViewer>

          <StackPanel Margin="5" Grid.Row="1" Orientation="Horizontal">
            <CheckBox Content="{DynamicResource Spell_UseSequencialTTS}" IsChecked="{Binding Model.IsSequentialTTS, Mode=TwoWay}" HorizontalAlignment="Center" />
            <TextBlock Margin="15 0 0 0" HorizontalAlignment="Center">
              <Hyperlink Command="{Binding TestSequencialTTSCommand, Mode=OneWay}">
                <TextBlock Text="{DynamicResource Spell_TestSequencialTTS}" />
              </Hyperlink>
            </TextBlock>
          </StackPanel>
        </Grid>
      </TabItem>
      <!-- Notice タブ end -->

      <!-- XMLタブ start -->
      <TabItem Header="XML"  Padding="20 2 20 2">
        <Grid Margin="5">
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>

          <avalonEdit:TextEditor
            x:Name="XMLEditor"
            Grid.Row="0"
            ShowLineNumbers="True"
            SyntaxHighlighting="XML"
            VerticalScrollBarVisibility="Auto"
            HorizontalScrollBarVisibility="Auto"
            FontFamily="Consolas, Yu Gothic UI"
            FontSize="12pt"
            Loaded="XMLEditorOnLoaded">
            <avalonEdit:TextEditor.Options>
              <avalonEdit:TextEditorOptions
                ConvertTabsToSpaces="True"
                ShowSpaces="True"
                ShowTabs="True"
                IndentationSize="2" />
            </avalonEdit:TextEditor.Options>
          </avalonEdit:TextEditor>

          <DockPanel Grid.Row="1" Margin="5 10">
            <TextBlock DockPanel.Dock="Left" Margin="0 0 0 0">
              <Hyperlink Click="XMLCopyOnClick">Copy</Hyperlink>
            </TextBlock>

            <TextBlock DockPanel.Dock="Left" Margin="15 0 0 0">
              <Hyperlink Click="XMLPasteOnClick">Paste</Hyperlink>
            </TextBlock>

            <TextBlock DockPanel.Dock="Right" HorizontalAlignment="Right" Margin="15 0 0 0">
              <Hyperlink Click="XMLApplyOnClick">Apply</Hyperlink>
            </TextBlock>
          </DockPanel>
        </Grid>
      </TabItem>
      <!-- XMLタブ end -->
    </TabControl>

    <!-- Bottom Buttons start -->
    <DockPanel Grid.Row="1">
      <TextBlock Margin="5 5 0 5" DockPanel.Dock="Left">
        <Hyperlink Command="{Binding SimulateMatchCommand, Mode=OneWay}">
          <TextBlock Text="{DynamicResource Trigger_SimulateMatch}" />
        </Hyperlink>
      </TextBlock>

      <TextBlock Margin="0 5 5 5" DockPanel.Dock="Right" HorizontalAlignment="Right">
        <Hyperlink Command="{Binding CopyConfigCommand, Mode=OneWay}">
          <TextBlock Text="{DynamicResource Copy_Copy}" />
        </Hyperlink>
      </TextBlock>
    </DockPanel>
    <!-- Bottom Buttons end -->

    <!-- Progress Panel -->
    <Border
      HorizontalAlignment="Center"
      VerticalAlignment="Center"
      BorderBrush="Gray"
      BorderThickness="4"
      CornerRadius="6"
      Padding="13"
      MinWidth="500"
      Background="White"
      Visibility="{Binding InProgress, Converter={StaticResource VisibilityConverter}, Mode=OneWay}">
      <StackPanel>
        <TextBlock
          Text="{Binding ProgressMessage, Mode=OneWay}" />
        <ProgressBar
          Margin="0 10 0 0"
          VerticalAlignment="Bottom"
          Height="20"
          Value="{Binding CurrentValue, Mode=OneWay}"
          Maximum="{Binding MaxValue, Mode=OneWay}" />
      </StackPanel>
    </Border>
  </Grid>
</UserControl>
